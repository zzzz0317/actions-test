name: Test

on:
  workflow_dispatch:
    # inputs:
    #   tag_name:
    #     description: 'Tag name (e.g., v1.0.0)'
    #     required: true
  push:
    branches:
      - main
    # tags:
    #   - '*'

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Check build space
        run: |
          df -h
          lsblk
          free -h
      - name: Generate file
        run: |
          dd if=/dev/zero of=test.file count=32 bs=1M
          TZ=Asia/Shanghai date +'%y%m%d%H%M%S' > version.buildinfo
          echo 'this is test.manifest' > test.manifest
      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          cp test.file release_assets/ || true
          cp version.buildinfo release_assets/ || true
          cp test.manifest release_assets/ || true
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: release_assets/
      - name: Calculate disk usage
        if: always()
        run: |
          df -h
          lsblk
          du -h --max-depth=2
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: release_assets/
      - name: List files
        run: |
          ls -lah
          ls -lah release_assets
      - name: Get current date and time for release info
        id: release-prepare
        run: |
          current_date=$(TZ=Asia/Shanghai date +'%y%m%d')
          current_time=$(TZ=Asia/Shanghai date +'%H%M%S')
          echo "current_date=${current_date}" >> $GITHUB_OUTPUT
          echo "current_time=${current_time}" >> $GITHUB_OUTPUT
          RELEASE_DATE=$(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')
          VERSION=$(cat release_assets/version.buildinfo | grep '^r' | head -n 1)
          echo "RELEASE_TITLE=${RELEASE_DATE} - ${VERSION}" >> $GITHUB_OUTPUT
      - name: Check for changes since last tag
        id: check-changes
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "needs_new_tag=true" >> $GITHUB_OUTPUT
            echo "new_tag=v0.${{ steps.release-prepare.outputs.current_date }}.${{ steps.release-prepare.outputs.current_time }}" >> $GITHUB_OUTPUT
          else
            has_changes=$(git diff --quiet $latest_tag HEAD || echo "true")
            if [ -n "$has_changes" ]; then
              echo "needs_new_tag=true" >> $GITHUB_OUTPUT
              echo "new_tag=v0.${{ steps.release-prepare.outputs.current_date }}.${{ steps.release-prepare.outputs.current_time }}" >> $GITHUB_OUTPUT
            else
              echo "needs_new_tag=false" >> $GITHUB_OUTPUT
              echo "new_tag=$latest_tag" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Create new tag if needed
        if: steps.check-changes.outputs.needs_new_tag == 'true'
        run: |
          git tag ${{ steps.check-changes.outputs.new_tag }}
          git push origin ${{ steps.check-changes.outputs.new_tag }}
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check-changes.outputs.new_tag }}
          # tag_name: ${{ inputs.tag_name }}
          name: ${{ steps.release-prepare.outputs.RELEASE_TITLE }}
          body_path: release_assets/test.manifest
          files: |
            release_assets/*
